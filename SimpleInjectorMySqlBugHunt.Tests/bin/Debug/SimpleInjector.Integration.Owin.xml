<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleInjector.Integration.Owin</name>
    </assembly>
    <members>
        <member name="T:SimpleInjector.Integration.Owin.SimpleInjectorOwinExtensions">
            <summary>
            Extension methods for integrating Simple Injector with OWIN applications.
            </summary>
        </member>
        <member name="M:SimpleInjector.Integration.Owin.SimpleInjectorOwinExtensions.UseOwinRequestLifestyle(Owin.IAppBuilder)">
            <summary>
            Enable <see cref="T:SimpleInjector.Integration.Owin.OwinRequestLifestyle"/> for Simple Injector.
            This should be registered to OWIN middleware pipeline as early as possible.
            </summary>
            <param name="app">OWIN app builder.</param>
        </member>
        <member name="M:SimpleInjector.Integration.Owin.SimpleInjectorOwinExtensions.RegisterPerOwinRequest``1(SimpleInjector.Container)">
            <summary>
            Registers that one instance of <typeparamref name="TConcrete"/> will be returned for every OWIN
            request and ensures that -if <typeparamref name="TConcrete"/> implements 
            <see cref="T:System.IDisposable"/>- this instance will get disposed on the end of the OWIN request. 
            
            OWIN application should call <c>UseOwinRequestLifestyle()</c> on OWIN app builder as early as possible to enable this lifestyle.
            </summary>
            <typeparam name="TConcrete">The concrete type that will be registered.</typeparam>
            <param name="container">The container to make the registrations in.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when an 
            the <typeparamref name="TConcrete"/> has already been registered.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown when the <typeparamref name="TConcrete"/> is a type
            that can not be created by the container.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="container"/> is a null
            reference.</exception>
        </member>
        <member name="M:SimpleInjector.Integration.Owin.SimpleInjectorOwinExtensions.RegisterPerOwinRequest``2(SimpleInjector.Container)">
            <summary>
            Registers that one instance of <typeparamref name="TImplementation"/> will be returned for every 
            OWIN request every time a <typeparamref name="TService"/> is requested and ensures that -if 
            <typeparamref name="TImplementation"/> implements <see cref="T:System.IDisposable"/>- this instance 
            will get disposed on the end of the OWIN request.
            
            OWIN application should call <c>UseOwinRequestLifestyle()</c> on OWIN app builder as early as possible to enable this lifestyle.
            </summary>
            <typeparam name="TService">The interface or base type that can be used to retrieve the instances.
            </typeparam>
            <typeparam name="TImplementation">The concrete type that will be registered.</typeparam>
            <param name="container">The container to make the registrations in.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when an 
            the <typeparamref name="TService"/> has already been registered.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the given <typeparamref name="TImplementation"/> 
            type is not a type that can be created by the container.
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="container"/> is a null
            reference.</exception>
        </member>
        <member name="M:SimpleInjector.Integration.Owin.SimpleInjectorOwinExtensions.RegisterPerOwinRequest``1(SimpleInjector.Container,System.Func{``0})">
            <summary>
            Registers the specified delegate that allows returning instances of <typeparamref name="TService"/>
            and the returned instance will be reused for the duration of a single OWIN request and ensures that,
            if the returned instance implements <see cref="T:System.IDisposable"/>, that instance will get
            disposed on the end of the OWIN request.
            
            OWIN application should call <c>UseOwinRequestLifestyle()</c> on OWIN app builder as early as possible to enable this lifestyle.
            </summary>
            <typeparam name="TService">The interface or base type that can be used to retrieve instances.</typeparam>
            <param name="container">The container to make the registrations in.</param>
            <param name="instanceCreator">The delegate that allows building or creating new instances.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when the
            <typeparamref name="TService"/> has already been registered.</exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when either <paramref name="container"/> or <paramref name="instanceCreator"/> are null
            references.</exception>
        </member>
        <member name="M:SimpleInjector.Integration.Owin.SimpleInjectorOwinExtensions.RegisterPerOwinRequest``1(SimpleInjector.Container,System.Func{``0},System.Boolean)">
            <summary>
            Registers the specified delegate that allows returning instances of <typeparamref name="TService"/>
            and the returned instance will be reused for the duration of a single OWIN request and ensures that,
            if the returned instance implements <see cref="T:System.IDisposable"/>, and
            <paramref name="disposeInstanceWhenOwinRequestEnds"/> is set to <b>true</b>, that instance will get
            disposed on the end of the OWIN request.
            
            OWIN application should call <c>UseOwinRequestLifestyle()</c> on OWIN app builder as early as possible to enable this lifestyle.
            </summary>
            <typeparam name="TService">The interface or base type that can be used to retrieve instances.</typeparam>
            <param name="container">The container to make the registrations in.</param>
            <param name="instanceCreator">The delegate that allows building or creating new instances.</param>
            <param name="disposeInstanceWhenOwinRequestEnds">If set to <c>true</c>, the instance will get disposed
            when it implements <see cref="T:System.IDisposable"/> at the end of the OWIN request.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when the
            <typeparamref name="TService"/> has already been registered.</exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when either <paramref name="container"/> or <paramref name="instanceCreator"/> are null
            references.</exception>
        </member>
        <member name="T:SimpleInjector.Integration.Owin.OwinContextProvider">
            <summary>
                <see cref="T:Microsoft.Owin.IOwinContext"/> Provider
            </summary>
        </member>
        <member name="P:SimpleInjector.Integration.Owin.OwinContextProvider.Current">
            <summary>
                Get current <see cref="T:Microsoft.Owin.IOwinContext"/>, or <c>null</c> if no <see cref="T:Microsoft.Owin.IOwinContext"/> found.
            </summary>
        </member>
        <member name="T:SimpleInjector.Integration.Owin.OwinRequestLifestyle">
            <summary>
            Defines a lifestyle that caches instances during the execution of a single OWIN Request.
            Unless explicitly stated otherwise, instances created by this lifestyle will be disposed at the end
            of the OWIN request.
            
            OWIN application should call <c>UseOwinRequestLifestyle()</c> on OWIN app builder as early as possible to enable this lifestyle.
            </summary>
            <example>
            The following example shows the usage of the <b>OwinRequestLifestyle</b> class:
            <code lang="cs"><![CDATA[
            var container = new Container();
            container.Register<IUnitOfWork, EntityFrameworkUnitOfWork>(new OwinRequestLifestyle());
            ]]></code>
            </example>
        </member>
        <member name="M:SimpleInjector.Integration.Owin.OwinRequestLifestyle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:SimpleInjector.Integration.Owin.OwinRequestLifestyle"/> class. The instance
            will ensure that created and cached instance will be disposed after the execution of the OWIN
            request ended and when the created object implements <see cref="T:System.IDisposable"/>.</summary>
        </member>
        <member name="M:SimpleInjector.Integration.Owin.OwinRequestLifestyle.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:SimpleInjector.Integration.Owin.OwinRequestLifestyle"/> class.</summary>
            <param name="disposeInstanceWhenOwinRequestEnds">
            Specifies whether the created and cached instance will be disposed after the execution of the OWIN
            request ended and when the created object implements <see cref="T:System.IDisposable"/>. 
            </param>
        </member>
        <member name="M:SimpleInjector.Integration.Owin.OwinRequestLifestyle.CreateCurrentScopeProvider(SimpleInjector.Container)">
            <summary>
            Creates a delegate that upon invocation return the current <see cref="T:SimpleInjector.Scope"/> for this
                        lifestyle and the given <paramref name="container"/>, or null when the delegate is executed outside
                        the context of such scope.
            </summary>
            <param name="container">The container for which the delegate gets created.</param>
            <returns>
            A <see cref="T:System.Func`1"/> delegate. This method should never return null.
            </returns>
        </member>
    </members>
</doc>
